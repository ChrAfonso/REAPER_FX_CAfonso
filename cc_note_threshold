desc:Midi CC Note Threshold
//tags: MIDI

slider1:1<1,16,1>Midi Channel
slider2:1<0,127,1{0 All,1 Mod Wheel M,2 Breath M,3,4 Foot P M,5 Porta M,6 Data Entry M,7 Vol M,8 Balance M,9,10 Pan M,11 Expression M,12 Ctrl 1 M,13 Ctrl 2 M,14,15,16 GP Slider 1,17 GP Slider 2,18 GP Slider 3,19 GP Slider 4,20,21,22,23,24,25,26,27,28,29,30,31,32 Bank Sel L,33 Mod Wheel L,34 Breath L,35,36 Foot P L,37 Porta L,38 Data Entry L,39 Vol L,40 Balance L,41,42 Pan L,43 Expression L,44 Ctrl 1 L,45 Ctrl 2 L,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64 Hold P sw,65 Porta sw,66 Sustenuto sw,67 Soft P sw,68 Legato P sw,69 Hold 2 P sw,70 S.Variation,71 S.Timbre,72 Release,73 Attack,74 Cutoff,75 Decay,76 S.Ctrl 7,77 S.Ctrl 8,78 S.Ctrl 9,79 S.Ctrl 10,80 GP B.1 sw,81 GP B.2 sw,82 GP B.3 sw,83 GP B.4 sw,84,85,86,87,88,89,90,91 Effects Lv,92 Trem Lv,93 Chorus Lv,94 Celeste Lv,95 Phaser Lv,96 Data B. Inc,97 Data B. Dec,98 NRP L,99 NRP M,100 RP L,101 RP M,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127}>CC
slider3:12<0,127,1>Threshold ON
//slider4:6<1,127,1>Threshold OFF

// set to exclude keyswitches from being suppressed
slider6:0<0,127,1>Lowest playable note
slider7:127<0,127,1>Highest playable note

@init ////////////////////////////////////////////////////

cc_prev = 0;
cc_val = 0;
keys_on = 0;
k = 0; loop (128,
	keys_on[k] = 0;
	k+=1;
);

lowest = slider6;
highest = slider7;

@slider //////////////////////////////////////////////////

// send peak as CC
midi_chan = slider1 - 1;
cc_chan = slider2;
thresh = slider3;
thresh_off = thresh;
stat = -1;

lowest = slider6;
highest = slider7;

@sample //////////////////////////////////////////////////

while (midirecv(offset, msg1, msg2, msg3) ?
	(
		status = msg1 & 240;
		nnnn = msg1 & 15;
		
		nnnn == midi_chan ? (
			
			// cc change?
			(status == $xB0 && msg2 == cc_chan) ? (
				cc_val = msg3;
			);
			
			cc_val < thresh_off ? (
				// passed threshold downwards?
				cc_prev >= thresh_off ? (
					// turn off all notes
					k = 0; loop(128,
						midisend(offset, $x80|nnnn, k, keys_on[k]);
						k+=1;
					);
				);
				
				// pass through all non-note on/off messages, and keys outside of range (for keyswitches)
				(status != $x80 && status != $x90) || (msg2 < lowest) || (msg2 > highest) ? (
					midisend(offset, msg1, msg2, msg3);
				);
			) : cc_val >= thresh ? (
				// passed threshold upwards?
				cc_prev < thresh ? (
					// replay stored notes
					k = 0; loop(128,
						keys_on[k] > 0 ? (
							midisend(offset, $x80|nnnn, k, keys_on[k]); // safety? note off first
							midisend(offset, $x90|nnnn, k, keys_on[k]);
						);
						k+=1;
					);
				);
				
				// pass through all others
				midisend(offset, msg1, msg2, msg3);
			);
			
			// store note on/off
			status == $x90 ? (
				// on
				keys_on[msg2] = msg3; // store velocity
			);
			status == $x80 ? (
				// off
				keys_on[msg2] = 0;
			);
			
			cc_prev = cc_val;
		) : (
			// pass other channels
			midisend(offset, msg1, msg2, msg3);
		);
	);
);

@gfx /////////////////////////////////////////////

// debug output
gui_y = 10;
debug = 0;
debug ? (
	gfx_r = 255;
	gfx_g = 255;
	gfx_b = 0;
	
	gfx_x = 10;
	gfx_y = 10;
	gfx_drawstr("cc val: ");
	gfx_drawnumber(cc_val,0);
	
	gfx_y = 20;
	gfx_x = 10;
	cc_val >= thresh ? (
		gfx_r = 0;
		gfx_drawstr("Over thresh!");
		gfx_r = 255;
	);
	
	gfx_x = 10;
	gfx_y = 50;
	gfx_drawstr("Last MIDI message: ");
	gfx_drawnumber(status>>4, 0); gfx_drawstr("@"); gfx_drawnumber(nnnn,0); gfx_drawstr(", ");
	gfx_drawnumber(msg2, 0); gfx_drawstr(", ");
	gfx_drawnumber(msg3, 0);
	
	gfx_x = 10;
	gfx_y = 70;
	gfx_b = 255;
	gfx_drawstr("note states: ");
	gfx_x = 10;
	gfx_y = 80;
	k=0; loop(127,
		gfx_drawnumber(keys_on[k],0);
		gfx_drawstr(",");
		
		k+=1;
		k % 12 == 0 ? (
			gfx_x = 10;
			gfx_y += 10;
		);
	);
	
	gui_y = 210;
);

// visualization
key_width = 10;
key_height = 40;
keyboard_x = 50;
keyboard_y = gui_y + 10;

function black_key(note) (
	mod = note % 12;
	((1 << mod) & $x54A) > 0; // black keys bitmask: 0101 0100 1010
);

// CC meter on the left
gfx_x = 10;
gfx_y = gui_y;
gfx_drawstr("CC:");

//   frame
gfx_r = gfx_g = gfx_b = 0.8;
gfx_rect(10, gui_y + 10, 20, key_height);

//   bg
gfx_r = gfx_g = gfx_b = 0.2;
gfx_rect(11, gui_y + 11, 18, key_height-2);

//   bar
cc_val > thresh ? gfx_g = 1 : gfx_r = 1;
height = cc_val*(key_height-2)/127;
gfx_rect(11, gui_y + (10 + key_height) - height, 18, height);

// Keyboard
function draw_keys(white) (
	x = keyboard_x;
	y = keyboard_y;
	k=0; loop(127,
		black_key(k) ? (
			k < lowest || k > highest ? (
				gfx_r = 0.6;
				gfx_g = gfx_b = (keys_on[k]) ? 0.4 : 0.2;
			) : (
				gfx_r = gfx_g = gfx_b = (keys_on[k]) ? 0.4 : 0.2;
			);
			off = 2;
			height = key_height * 0.6;
			black = 1;
		) : (
			k < lowest || k > highest ? (
				gfx_r = 1;
				gfx_g = gfx_b = (keys_on[k]) ? 0.6 : 0.4;
			) : (
				gfx_r = gfx_g = gfx_b = keys_on[k] ? 1 : 0.8;
			);
			off = 0;
			height = key_height;
			black = 0;
		);
		
		(black != white) ? gfx_rect(x+off, y, key_width-(2*off)-1, height);
		
		// mark Cs
		k % 12 == 0 ? (
			octave = (k - (k % 12))/12 - 1;
			gfx_r = gfx_g = gfx_b = 1;
			gfx_x = x;
			gfx_y = gui_y + 10 + key_height + 1;
			gfx_drawstr("C");
			gfx_drawnumber(octave, 0);
		);
		
		k += 1;
		x += (k % 12 == 5 || k % 12 == 0) ? 10 : 5; // more space before F and C keys
	);
);

draw_keys(1); // white keys
draw_keys(0); // black keys


