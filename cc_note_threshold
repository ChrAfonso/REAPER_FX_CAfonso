desc:Midi CC Note Threshold
//tags: MIDI

slider1:0<0,15,1>Midi Channel
slider2:1<0,119,1>CC
slider3:12<0,127,1>Threshold ON
//slider4:6<1,127,1>Threshold OFF

// set to exclude keyswitches from being suppressed
slider6:0<0,127,1>Lowest playable note
slider7:127<0,127,1>Highest playable note

@init ////////////////////////////////////////////////////

cc_prev = 0;
cc_val = 0;
keys_on = 0;
k = 0; loop (128,
	keys_on[k] = 0;
	k+=1;
);

lowest = slider6;
highest = slider7;

@slider //////////////////////////////////////////////////

// send peak as CC
midi_chan = slider1;
cc_chan = slider2;
thresh = slider3;
thresh_off = thresh;
stat = -1;

lowest = slider6;
highest = slider7;

@sample //////////////////////////////////////////////////

while (midirecv(offset, msg1, msg2, msg3) ?
	(
		status = msg1 & 240;
		nnnn = msg1 & 15;
		
		nnnn == midi_chan ? (
			
			// cc change?
			(status == $xB0 && msg2 == cc_chan) ? (
				cc_val = msg3;
			);
			
			cc_val < thresh_off ? (
				// passed threshold downwards?
				cc_prev >= thresh_off ? (
					// turn off all notes
					k = 0; loop(128,
						midisend(offset, $x80|nnnn, k, keys_on[k]);
						k+=1;
					);
				);
				
				// pass through all non-note on/off messages, and keys outside of range (for keyswitches)
				(status != $x80 && status != $x90) || (msg2 < lowest) || (msg2 > highest) ? (
					midisend(offset, msg1, msg2, msg3);
				);
			) : cc_val >= thresh ? (
				// passed threshold upwards?
				cc_prev < thresh ? (
					// replay stored notes
					k = 0; loop(128,
						keys_on[k] > 0 ? (
							midisend(offset, $x80|nnnn, k, keys_on[k]); // safety? note off first
							midisend(offset, $x90|nnnn, k, keys_on[k]);
						);
						k+=1;
					);
				);
				
				// pass through all others
				midisend(offset, msg1, msg2, msg3);
			);
			
			// store note on/off
			status == $x90 ? (
				// on
				keys_on[msg2] = msg3; // store velocity
			);
			status == $x80 ? (
				// off
				keys_on[msg2] = 0;
			);
			
			cc_prev = cc_val;
		) : (
			// pass other channels
			midisend(offset, msg1, msg2, msg3);
		);
	);
);

@gfx /////////////////////////////////////////////

// debug output
gfx_r = 255;
gfx_g = 255;
gfx_b = 0;

gfx_x = 10;
gfx_y = 10;
gfx_drawstr("cc val: ");
gfx_drawnumber(cc_val,0);

gfx_y = 20;
gfx_x = 10;
cc_val >= thresh ? (
	gfx_r = 0;
	gfx_drawstr("Over thresh!");
	gfx_r = 255;
);

gfx_x = 10;
gfx_y = 50;
gfx_drawstr("Last MIDI message: ");
gfx_drawnumber(status>>4, 0); gfx_drawstr("@"); gfx_drawnumber(nnnn,0); gfx_drawstr(", ");
gfx_drawnumber(msg2, 0); gfx_drawstr(", ");
gfx_drawnumber(msg3, 0);

gfx_x = 10;
gfx_y = 70;
gfx_b = 255;
gfx_drawstr("note states: ");
gfx_x = 10;
gfx_y = 80;
k=0; loop(127,
	gfx_drawnumber(keys_on[k],0);
	gfx_drawstr(",");
	
	k+=1;
	k % 12 == 0 ? (
		gfx_x = 10;
		gfx_y += 10;
	);
);

// visualization
function black_key(note) (
	mod = note % 12;
	((1 << mod) & $x54A) > 0; // black keys bitmask: 0101 0100 1010
);

// TODO CC meter on the left?

// Keyboard
key_width = 10;
keyboard_x = 10;
keyboard_y = 220;

function draw_keys(white) (
	x = keyboard_x;
	y = keyboard_y;
	k=0; loop(127,
		black_key(k) ? (
			k < lowest || k > highest ? (
				gfx_r = 0.6;
				gfx_g = gfx_b = (keys_on[k]) ? 0.4 : 0.2;
			) : (
				gfx_r = gfx_g = gfx_b = (keys_on[k]) ? 0.4 : 0.2;
			);
			off = 2;
			height = 22;
			black = 1;
		) : (
			k < lowest || k > highest ? (
				gfx_r = 1;
				gfx_g = gfx_b = (keys_on[k]) ? 0.6 : 0.4;
			) : (
				gfx_r = gfx_g = gfx_b = keys_on[k] ? 1 : 0.8;
			);
			off = 0;
			height = 40;
			black = 0;
		);
		
		(black != white) ? gfx_rect(x+off, y, key_width-(2*off)-1, height);
		
		k += 1;
		x += (k % 12 == 5 || k % 12 == 0) ? 10 : 5; // more space before F and C keys
	);
);

draw_keys(1); // white keys
draw_keys(0); // black keys
